# ----------------------------------------------------------------
# launch the MDI web server and browser client in 'public' mode
#     web server  runs on a remote AWS EC2 instance in the cloud
#     web browser runs on a user's local desktop/laptop computer
#     thus, address entered into web browser is "https://example.org"
# -----------------------------------------------------------------------
# this script was generated by https://wilsonte-umich.shinyapps.io/mdi-script-generator/
# GitHub repository for script generator: https://github.com/MiDataInt/mdi-script-generator
# script template author: Thomas E. Wilson, https://wilsonte-umich.github.io/
# ----------------------------------------------------------------

# -----------------------------------------------------------------------
# set variable values
# -----------------------------------------------------------------------
SERVER_URL="__SERVER_URL__"
IDENTITY_FILE="__IDENTITY_FILE__"

# -----------------------------------------------------------------------
# prompt the user for the requested action
# -----------------------------------------------------------------------
while true; do 
# -----------------------------------------------------------------------
ACTION_NAME=""
echo
echo "Welcome to the Michigan Data Interface."
echo
echo "  SERVER_URL   $SERVER_URL"
echo 
echo "What would you like to do on the server?"
echo 
echo "  Server execution commands (in order of usage):"
echo "    edit      use nano to edit one of the server configuration files"
echo "    build     run docker-compose build to create all needed Docker images"
echo "    install   load the server config, clone GitHub repos, install R packages"
echo "    up        launch all containers to run the MDI apps server"
echo "    down      stop and remove any running containers to shut down the apps server"
echo 
echo "  Interactive command shells:"
echo "    bash      bring up a bash terminal in a new apps-server container"
echo "    ssh       bring up a bash terminal in the host server itself"
echo
echo "Please type a command name (Enter to do nothing and quit): "
read ACTION_NAME

# exit and do nothing
if [ "$ACTION_NAME" = "" ]; then
    exit

# request the server file to edit
elif [ "$ACTION_NAME" = "edit" ]; then
    echo 
    echo "Please select the server file you would like to edit."
    echo 
    echo "  1 - server.sh             server configuration metadata"
    echo "  2 - suites.yml            pipelines and apps suites to install"
    echo "  3 - stage1-pipelines.yml  system defaults for pipeline execution"
    echo "  4 - stage2-apps.yml       access control options for the apps server"
    echo "  5 - exit and do nothing"
    echo
    echo "Select a file to edit by its number: "
    read FILE_NUMBER
    if [ "$FILE_NUMBER" = "1" ]; then
        FILE_NAME=server.sh
    elif [ "$FILE_NUMBER" = "2" ]; then
        FILE_NAME=suites.yml
    elif [ "$FILE_NUMBER" = "3" ]; then
        FILE_NAME=stage1-pipelines.yml
    elif [ "$FILE_NUMBER" = "4" ]; then
        FILE_NAME=stage2-apps.yml
    else
        exit
    fi
    ssh $IDENTITY_FILE -o "StrictHostKeyChecking no" ubuntu@$SERVER_URL -t /srv/mdi/server $ACTION_NAME $FILE_NAME

# use a pseudo-terminal for bash command also
elif [ "$ACTION_NAME" = "bash" ]; then
    ssh $IDENTITY_FILE -o "StrictHostKeyChecking no" ubuntu@$SERVER_URL -t /srv/mdi/server $ACTION_NAME

# ssh into the server itself (not an apps-server container)
elif [ "$ACTION_NAME" = "ssh" ]; then
    ssh $IDENTITY_FILE -o "StrictHostKeyChecking no" ubuntu@$SERVER_URL

# send all other actions directly to server via SSH
else
    ssh $IDENTITY_FILE -o "StrictHostKeyChecking no" ubuntu@$SERVER_URL /srv/mdi/server $ACTION_NAME
fi
# -----------------------------------------------------------------------
done
